// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: icecreamservice.proto

package icecreamservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IceCreamService_GetFlavorDetails_FullMethodName      = "/icecreamservice.IceCreamService/GetFlavorDetails"
	IceCreamService_GetFlavorDetailsArrow_FullMethodName = "/icecreamservice.IceCreamService/GetFlavorDetailsArrow"
)

// IceCreamServiceClient is the client API for IceCreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IceCreamServiceClient interface {
	GetFlavorDetails(ctx context.Context, in *GetFlavorDetailsRequest, opts ...grpc.CallOption) (*GetFlavorDetailsResponse, error)
	GetFlavorDetailsArrow(ctx context.Context, in *GetFlavorDetailsRequest, opts ...grpc.CallOption) (*GetFlavorDetailsArrowResponse, error)
}

type iceCreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIceCreamServiceClient(cc grpc.ClientConnInterface) IceCreamServiceClient {
	return &iceCreamServiceClient{cc}
}

func (c *iceCreamServiceClient) GetFlavorDetails(ctx context.Context, in *GetFlavorDetailsRequest, opts ...grpc.CallOption) (*GetFlavorDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlavorDetailsResponse)
	err := c.cc.Invoke(ctx, IceCreamService_GetFlavorDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceCreamServiceClient) GetFlavorDetailsArrow(ctx context.Context, in *GetFlavorDetailsRequest, opts ...grpc.CallOption) (*GetFlavorDetailsArrowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlavorDetailsArrowResponse)
	err := c.cc.Invoke(ctx, IceCreamService_GetFlavorDetailsArrow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IceCreamServiceServer is the server API for IceCreamService service.
// All implementations must embed UnimplementedIceCreamServiceServer
// for forward compatibility.
type IceCreamServiceServer interface {
	GetFlavorDetails(context.Context, *GetFlavorDetailsRequest) (*GetFlavorDetailsResponse, error)
	GetFlavorDetailsArrow(context.Context, *GetFlavorDetailsRequest) (*GetFlavorDetailsArrowResponse, error)
	mustEmbedUnimplementedIceCreamServiceServer()
}

// UnimplementedIceCreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIceCreamServiceServer struct{}

func (UnimplementedIceCreamServiceServer) GetFlavorDetails(context.Context, *GetFlavorDetailsRequest) (*GetFlavorDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlavorDetails not implemented")
}
func (UnimplementedIceCreamServiceServer) GetFlavorDetailsArrow(context.Context, *GetFlavorDetailsRequest) (*GetFlavorDetailsArrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlavorDetailsArrow not implemented")
}
func (UnimplementedIceCreamServiceServer) mustEmbedUnimplementedIceCreamServiceServer() {}
func (UnimplementedIceCreamServiceServer) testEmbeddedByValue()                         {}

// UnsafeIceCreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IceCreamServiceServer will
// result in compilation errors.
type UnsafeIceCreamServiceServer interface {
	mustEmbedUnimplementedIceCreamServiceServer()
}

func RegisterIceCreamServiceServer(s grpc.ServiceRegistrar, srv IceCreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedIceCreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IceCreamService_ServiceDesc, srv)
}

func _IceCreamService_GetFlavorDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlavorDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceCreamServiceServer).GetFlavorDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IceCreamService_GetFlavorDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceCreamServiceServer).GetFlavorDetails(ctx, req.(*GetFlavorDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IceCreamService_GetFlavorDetailsArrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlavorDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceCreamServiceServer).GetFlavorDetailsArrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IceCreamService_GetFlavorDetailsArrow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceCreamServiceServer).GetFlavorDetailsArrow(ctx, req.(*GetFlavorDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IceCreamService_ServiceDesc is the grpc.ServiceDesc for IceCreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IceCreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "icecreamservice.IceCreamService",
	HandlerType: (*IceCreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlavorDetails",
			Handler:    _IceCreamService_GetFlavorDetails_Handler,
		},
		{
			MethodName: "GetFlavorDetailsArrow",
			Handler:    _IceCreamService_GetFlavorDetailsArrow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "icecreamservice.proto",
}
